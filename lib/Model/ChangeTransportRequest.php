<?php
/**
 * ChangeTransportRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v4
 *
 * The bol.com API for Retailers.
 *
 * The version of the OpenAPI document: 4.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ChangeTransportRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ChangeTransportRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChangeTransportRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transporter_code' => 'string',
        'track_and_trace' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transporter_code' => null,
        'track_and_trace' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transporter_code' => 'transporterCode',
        'track_and_trace' => 'trackAndTrace'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transporter_code' => 'setTransporterCode',
        'track_and_trace' => 'setTrackAndTrace'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transporter_code' => 'getTransporterCode',
        'track_and_trace' => 'getTrackAndTrace'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TRANSPORTER_CODE_BRIEFPOST = 'BRIEFPOST';
    const TRANSPORTER_CODE_UPS = 'UPS';
    const TRANSPORTER_CODE_TNT = 'TNT';
    const TRANSPORTER_CODE_TNT_EXTRA = 'TNT-EXTRA';
    const TRANSPORTER_CODE_TNT_BRIEF = 'TNT_BRIEF';
    const TRANSPORTER_CODE_TNT_EXPRESS = 'TNT-EXPRESS';
    const TRANSPORTER_CODE_DYL = 'DYL';
    const TRANSPORTER_CODE_DPD_NL = 'DPD-NL';
    const TRANSPORTER_CODE_DPD_BE = 'DPD-BE';
    const TRANSPORTER_CODE_BPOST_BE = 'BPOST_BE';
    const TRANSPORTER_CODE_BPOST_BRIEF = 'BPOST_BRIEF';
    const TRANSPORTER_CODE_DHLFORYOU = 'DHLFORYOU';
    const TRANSPORTER_CODE_GLS = 'GLS';
    const TRANSPORTER_CODE_FEDEX_NL = 'FEDEX_NL';
    const TRANSPORTER_CODE_FEDEX_BE = 'FEDEX_BE';
    const TRANSPORTER_CODE_OTHER = 'OTHER';
    const TRANSPORTER_CODE_DHL = 'DHL';
    const TRANSPORTER_CODE_DHL_DE = 'DHL_DE';
    const TRANSPORTER_CODE_DHL_GLOBAL_MAIL = 'DHL-GLOBAL-MAIL';
    const TRANSPORTER_CODE_TSN = 'TSN';
    const TRANSPORTER_CODE_FIEGE = 'FIEGE';
    const TRANSPORTER_CODE_TRANSMISSION = 'TRANSMISSION';
    const TRANSPORTER_CODE_PARCEL_NL = 'PARCEL-NL';
    const TRANSPORTER_CODE_LOGOIX = 'LOGOIX';
    const TRANSPORTER_CODE_PACKS = 'PACKS';
    const TRANSPORTER_CODE_COURIER = 'COURIER';
    const TRANSPORTER_CODE_RJP = 'RJP';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransporterCodeAllowableValues()
    {
        return [
            self::TRANSPORTER_CODE_BRIEFPOST,
            self::TRANSPORTER_CODE_UPS,
            self::TRANSPORTER_CODE_TNT,
            self::TRANSPORTER_CODE_TNT_EXTRA,
            self::TRANSPORTER_CODE_TNT_BRIEF,
            self::TRANSPORTER_CODE_TNT_EXPRESS,
            self::TRANSPORTER_CODE_DYL,
            self::TRANSPORTER_CODE_DPD_NL,
            self::TRANSPORTER_CODE_DPD_BE,
            self::TRANSPORTER_CODE_BPOST_BE,
            self::TRANSPORTER_CODE_BPOST_BRIEF,
            self::TRANSPORTER_CODE_DHLFORYOU,
            self::TRANSPORTER_CODE_GLS,
            self::TRANSPORTER_CODE_FEDEX_NL,
            self::TRANSPORTER_CODE_FEDEX_BE,
            self::TRANSPORTER_CODE_OTHER,
            self::TRANSPORTER_CODE_DHL,
            self::TRANSPORTER_CODE_DHL_DE,
            self::TRANSPORTER_CODE_DHL_GLOBAL_MAIL,
            self::TRANSPORTER_CODE_TSN,
            self::TRANSPORTER_CODE_FIEGE,
            self::TRANSPORTER_CODE_TRANSMISSION,
            self::TRANSPORTER_CODE_PARCEL_NL,
            self::TRANSPORTER_CODE_LOGOIX,
            self::TRANSPORTER_CODE_PACKS,
            self::TRANSPORTER_CODE_COURIER,
            self::TRANSPORTER_CODE_RJP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transporter_code'] = $data['transporter_code'] ?? null;
        $this->container['track_and_trace'] = $data['track_and_trace'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransporterCodeAllowableValues();
        if (!is_null($this->container['transporter_code']) && !in_array($this->container['transporter_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transporter_code', must be one of '%s'",
                $this->container['transporter_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transporter_code
     *
     * @return string|null
     */
    public function getTransporterCode()
    {
        return $this->container['transporter_code'];
    }

    /**
     * Sets transporter_code
     *
     * @param string|null $transporter_code transporter_code
     *
     * @return self
     */
    public function setTransporterCode($transporter_code)
    {
        $allowedValues = $this->getTransporterCodeAllowableValues();
        if (!is_null($transporter_code) && !in_array($transporter_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transporter_code', must be one of '%s'",
                    $transporter_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transporter_code'] = $transporter_code;

        return $this;
    }

    /**
     * Gets track_and_trace
     *
     * @return string|null
     */
    public function getTrackAndTrace()
    {
        return $this->container['track_and_trace'];
    }

    /**
     * Sets track_and_trace
     *
     * @param string|null $track_and_trace The track and trace code that is associated with this transport.
     *
     * @return self
     */
    public function setTrackAndTrace($track_and_trace)
    {
        $this->container['track_and_trace'] = $track_and_trace;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * DeliveryOption
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  BolApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v7 - Retailer API
 *
 * The bol.com API for retailers.
 *
 * The version of the OpenAPI document: 7.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BolApi\Client\Model;

use \ArrayAccess;
use \BolApi\Client\ObjectSerializer;

/**
 * DeliveryOption Class Doc Comment
 *
 * @category Class
 * @description A delivery option shows how and the costs of a transport for a shippable configuration
 * @package  BolApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DeliveryOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeliveryOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipping_label_offer_id' => 'string',
        'recommended' => 'bool',
        'valid_until_date' => '\DateTime',
        'transporter_code' => 'string',
        'label_type' => 'string',
        'label_display_name' => 'string',
        'label_price' => '\BolApi\Client\Model\LabelPrice',
        'package_restrictions' => '\BolApi\Client\Model\PackageRestrictions',
        'handover_details' => '\BolApi\Client\Model\HandoverDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipping_label_offer_id' => null,
        'recommended' => null,
        'valid_until_date' => 'date',
        'transporter_code' => null,
        'label_type' => null,
        'label_display_name' => null,
        'label_price' => null,
        'package_restrictions' => null,
        'handover_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_label_offer_id' => 'shippingLabelOfferId',
        'recommended' => 'recommended',
        'valid_until_date' => 'validUntilDate',
        'transporter_code' => 'transporterCode',
        'label_type' => 'labelType',
        'label_display_name' => 'labelDisplayName',
        'label_price' => 'labelPrice',
        'package_restrictions' => 'packageRestrictions',
        'handover_details' => 'handoverDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_label_offer_id' => 'setShippingLabelOfferId',
        'recommended' => 'setRecommended',
        'valid_until_date' => 'setValidUntilDate',
        'transporter_code' => 'setTransporterCode',
        'label_type' => 'setLabelType',
        'label_display_name' => 'setLabelDisplayName',
        'label_price' => 'setLabelPrice',
        'package_restrictions' => 'setPackageRestrictions',
        'handover_details' => 'setHandoverDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_label_offer_id' => 'getShippingLabelOfferId',
        'recommended' => 'getRecommended',
        'valid_until_date' => 'getValidUntilDate',
        'transporter_code' => 'getTransporterCode',
        'label_type' => 'getLabelType',
        'label_display_name' => 'getLabelDisplayName',
        'label_price' => 'getLabelPrice',
        'package_restrictions' => 'getPackageRestrictions',
        'handover_details' => 'getHandoverDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LABEL_TYPE_PARCEL = 'PARCEL';
    const LABEL_TYPE_MAILBOX = 'MAILBOX';
    const LABEL_TYPE_MAILBOX_LIGHT = 'MAILBOX_LIGHT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelTypeAllowableValues()
    {
        return [
            self::LABEL_TYPE_PARCEL,
            self::LABEL_TYPE_MAILBOX,
            self::LABEL_TYPE_MAILBOX_LIGHT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipping_label_offer_id'] = $data['shipping_label_offer_id'] ?? null;
        $this->container['recommended'] = $data['recommended'] ?? null;
        $this->container['valid_until_date'] = $data['valid_until_date'] ?? null;
        $this->container['transporter_code'] = $data['transporter_code'] ?? null;
        $this->container['label_type'] = $data['label_type'] ?? null;
        $this->container['label_display_name'] = $data['label_display_name'] ?? null;
        $this->container['label_price'] = $data['label_price'] ?? null;
        $this->container['package_restrictions'] = $data['package_restrictions'] ?? null;
        $this->container['handover_details'] = $data['handover_details'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipping_label_offer_id'] === null) {
            $invalidProperties[] = "'shipping_label_offer_id' can't be null";
        }
        if ($this->container['recommended'] === null) {
            $invalidProperties[] = "'recommended' can't be null";
        }
        if ($this->container['transporter_code'] === null) {
            $invalidProperties[] = "'transporter_code' can't be null";
        }
        if ($this->container['label_type'] === null) {
            $invalidProperties[] = "'label_type' can't be null";
        }
        $allowedValues = $this->getLabelTypeAllowableValues();
        if (!is_null($this->container['label_type']) && !in_array($this->container['label_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'label_type', must be one of '%s'",
                $this->container['label_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['label_display_name'] === null) {
            $invalidProperties[] = "'label_display_name' can't be null";
        }
        if ($this->container['label_price'] === null) {
            $invalidProperties[] = "'label_price' can't be null";
        }
        if ($this->container['package_restrictions'] === null) {
            $invalidProperties[] = "'package_restrictions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping_label_offer_id
     *
     * @return string
     */
    public function getShippingLabelOfferId()
    {
        return $this->container['shipping_label_offer_id'];
    }

    /**
     * Sets shipping_label_offer_id
     *
     * @param string $shipping_label_offer_id Unique identifier for the shipping label offer.
     *
     * @return self
     */
    public function setShippingLabelOfferId($shipping_label_offer_id)
    {
        $this->container['shipping_label_offer_id'] = $shipping_label_offer_id;

        return $this;
    }

    /**
     * Gets recommended
     *
     * @return bool
     */
    public function getRecommended()
    {
        return $this->container['recommended'];
    }

    /**
     * Sets recommended
     *
     * @param bool $recommended Indicates whether this delivery option is recommended to be the best option to ship your order item(s) with.
     *
     * @return self
     */
    public function setRecommended($recommended)
    {
        $this->container['recommended'] = $recommended;

        return $this;
    }

    /**
     * Gets valid_until_date
     *
     * @return \DateTime|null
     */
    public function getValidUntilDate()
    {
        return $this->container['valid_until_date'];
    }

    /**
     * Sets valid_until_date
     *
     * @param \DateTime|null $valid_until_date The date until the delivery option (incl total price) is valid.
     *
     * @return self
     */
    public function setValidUntilDate($valid_until_date)
    {
        $this->container['valid_until_date'] = $valid_until_date;

        return $this;
    }

    /**
     * Gets transporter_code
     *
     * @return string
     */
    public function getTransporterCode()
    {
        return $this->container['transporter_code'];
    }

    /**
     * Sets transporter_code
     *
     * @param string $transporter_code A code representing the transporter which is being used for transportation.
     *
     * @return self
     */
    public function setTransporterCode($transporter_code)
    {
        $this->container['transporter_code'] = $transporter_code;

        return $this;
    }

    /**
     * Gets label_type
     *
     * @return string
     */
    public function getLabelType()
    {
        return $this->container['label_type'];
    }

    /**
     * Sets label_type
     *
     * @param string $label_type The type of the label, representing the way an item is being transported. MAILBOX is a mailbox package with delivery scan. MAILBOX_LIGHT is a mailbox package without delivery scan. PARCEL is a normal package.
     *
     * @return self
     */
    public function setLabelType($label_type)
    {
        $allowedValues = $this->getLabelTypeAllowableValues();
        if (!in_array($label_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'label_type', must be one of '%s'",
                    $label_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label_type'] = $label_type;

        return $this;
    }

    /**
     * Gets label_display_name
     *
     * @return string
     */
    public function getLabelDisplayName()
    {
        return $this->container['label_display_name'];
    }

    /**
     * Sets label_display_name
     *
     * @param string $label_display_name The display name of the shipping label.
     *
     * @return self
     */
    public function setLabelDisplayName($label_display_name)
    {
        $this->container['label_display_name'] = $label_display_name;

        return $this;
    }

    /**
     * Gets label_price
     *
     * @return \BolApi\Client\Model\LabelPrice
     */
    public function getLabelPrice()
    {
        return $this->container['label_price'];
    }

    /**
     * Sets label_price
     *
     * @param \BolApi\Client\Model\LabelPrice $label_price label_price
     *
     * @return self
     */
    public function setLabelPrice($label_price)
    {
        $this->container['label_price'] = $label_price;

        return $this;
    }

    /**
     * Gets package_restrictions
     *
     * @return \BolApi\Client\Model\PackageRestrictions
     */
    public function getPackageRestrictions()
    {
        return $this->container['package_restrictions'];
    }

    /**
     * Sets package_restrictions
     *
     * @param \BolApi\Client\Model\PackageRestrictions $package_restrictions package_restrictions
     *
     * @return self
     */
    public function setPackageRestrictions($package_restrictions)
    {
        $this->container['package_restrictions'] = $package_restrictions;

        return $this;
    }

    /**
     * Gets handover_details
     *
     * @return \BolApi\Client\Model\HandoverDetails|null
     */
    public function getHandoverDetails()
    {
        return $this->container['handover_details'];
    }

    /**
     * Sets handover_details
     *
     * @param \BolApi\Client\Model\HandoverDetails|null $handover_details handover_details
     *
     * @return self
     */
    public function setHandoverDetails($handover_details)
    {
        $this->container['handover_details'] = $handover_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



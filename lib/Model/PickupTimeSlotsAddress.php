<?php
/**
 * PickupTimeSlotsAddress
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  BolApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v7 - Retailer API
 *
 * The bol.com API for retailers.
 *
 * The version of the OpenAPI document: 7.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BolApi\Client\Model;

use \ArrayAccess;
use \BolApi\Client\ObjectSerializer;

/**
 * PickupTimeSlotsAddress Class Doc Comment
 *
 * @category Class
 * @package  BolApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PickupTimeSlotsAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PickupTimeSlotsAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'street_name' => 'string',
        'house_number' => 'string',
        'house_number_extension' => 'string',
        'zip_code' => 'string',
        'city' => 'string',
        'country_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'street_name' => null,
        'house_number' => null,
        'house_number_extension' => null,
        'zip_code' => null,
        'city' => null,
        'country_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'street_name' => 'streetName',
        'house_number' => 'houseNumber',
        'house_number_extension' => 'houseNumberExtension',
        'zip_code' => 'zipCode',
        'city' => 'city',
        'country_code' => 'countryCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'street_name' => 'setStreetName',
        'house_number' => 'setHouseNumber',
        'house_number_extension' => 'setHouseNumberExtension',
        'zip_code' => 'setZipCode',
        'city' => 'setCity',
        'country_code' => 'setCountryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'street_name' => 'getStreetName',
        'house_number' => 'getHouseNumber',
        'house_number_extension' => 'getHouseNumberExtension',
        'zip_code' => 'getZipCode',
        'city' => 'getCity',
        'country_code' => 'getCountryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['street_name'] = $data['street_name'] ?? null;
        $this->container['house_number'] = $data['house_number'] ?? null;
        $this->container['house_number_extension'] = $data['house_number_extension'] ?? null;
        $this->container['zip_code'] = $data['zip_code'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['street_name'] === null) {
            $invalidProperties[] = "'street_name' can't be null";
        }
        if ((mb_strlen($this->container['street_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['street_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['house_number'] === null) {
            $invalidProperties[] = "'house_number' can't be null";
        }
        if (!is_null($this->container['house_number_extension']) && (mb_strlen($this->container['house_number_extension']) > 6)) {
            $invalidProperties[] = "invalid value for 'house_number_extension', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['house_number_extension']) && (mb_strlen($this->container['house_number_extension']) < 0)) {
            $invalidProperties[] = "invalid value for 'house_number_extension', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['zip_code'] === null) {
            $invalidProperties[] = "'zip_code' can't be null";
        }
        if ((mb_strlen($this->container['zip_code']) > 8)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 8.";
        }

        if ((mb_strlen($this->container['zip_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 34)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 34.";
        }

        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ((mb_strlen($this->container['country_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['country_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name The street name of the pickup address.
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if ((mb_strlen($street_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling PickupTimeSlotsAddress., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($street_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling PickupTimeSlotsAddress., must be bigger than or equal to 1.');
        }

        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string $house_number The house number of the pickup address.
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets house_number_extension
     *
     * @return string|null
     */
    public function getHouseNumberExtension()
    {
        return $this->container['house_number_extension'];
    }

    /**
     * Sets house_number_extension
     *
     * @param string|null $house_number_extension The extension of the house number.
     *
     * @return self
     */
    public function setHouseNumberExtension($house_number_extension)
    {
        if (!is_null($house_number_extension) && (mb_strlen($house_number_extension) > 6)) {
            throw new \InvalidArgumentException('invalid length for $house_number_extension when calling PickupTimeSlotsAddress., must be smaller than or equal to 6.');
        }
        if (!is_null($house_number_extension) && (mb_strlen($house_number_extension) < 0)) {
            throw new \InvalidArgumentException('invalid length for $house_number_extension when calling PickupTimeSlotsAddress., must be bigger than or equal to 0.');
        }

        $this->container['house_number_extension'] = $house_number_extension;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string $zip_code The zip code in '1234AB' format for NL and '0000' for BE addresses.
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if ((mb_strlen($zip_code) > 8)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling PickupTimeSlotsAddress., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($zip_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling PickupTimeSlotsAddress., must be bigger than or equal to 1.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city of the pickup address.
     *
     * @return self
     */
    public function setCity($city)
    {
        if ((mb_strlen($city) > 34)) {
            throw new \InvalidArgumentException('invalid length for $city when calling PickupTimeSlotsAddress., must be smaller than or equal to 34.');
        }
        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling PickupTimeSlotsAddress., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code The ISO 3166-2 country code.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if ((mb_strlen($country_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling PickupTimeSlotsAddress., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($country_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling PickupTimeSlotsAddress., must be bigger than or equal to 1.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



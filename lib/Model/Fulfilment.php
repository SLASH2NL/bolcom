<?php
/**
 * Fulfilment
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  BolApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v7 - Retailer API
 *
 * The bol.com API for retailers.
 *
 * The version of the OpenAPI document: 7.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BolApi\Client\Model;

use \ArrayAccess;
use \BolApi\Client\ObjectSerializer;

/**
 * Fulfilment Class Doc Comment
 *
 * @category Class
 * @package  BolApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Fulfilment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Fulfilment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'method' => 'string',
        'delivery_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'method' => null,
        'delivery_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'method' => 'method',
        'delivery_code' => 'deliveryCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'method' => 'setMethod',
        'delivery_code' => 'setDeliveryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'method' => 'getMethod',
        'delivery_code' => 'getDeliveryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const METHOD_FBR = 'FBR';
    const METHOD_FBB = 'FBB';
    const DELIVERY_CODE__24UURS_23 = '24uurs-23';
    const DELIVERY_CODE__24UURS_22 = '24uurs-22';
    const DELIVERY_CODE__24UURS_21 = '24uurs-21';
    const DELIVERY_CODE__24UURS_20 = '24uurs-20';
    const DELIVERY_CODE__24UURS_19 = '24uurs-19';
    const DELIVERY_CODE__24UURS_18 = '24uurs-18';
    const DELIVERY_CODE__24UURS_17 = '24uurs-17';
    const DELIVERY_CODE__24UURS_16 = '24uurs-16';
    const DELIVERY_CODE__24UURS_15 = '24uurs-15';
    const DELIVERY_CODE__24UURS_14 = '24uurs-14';
    const DELIVERY_CODE__24UURS_13 = '24uurs-13';
    const DELIVERY_CODE__24UURS_12 = '24uurs-12';
    const DELIVERY_CODE__1_2D = '1-2d';
    const DELIVERY_CODE__2_3D = '2-3d';
    const DELIVERY_CODE__3_5D = '3-5d';
    const DELIVERY_CODE__4_8D = '4-8d';
    const DELIVERY_CODE__1_8D = '1-8d';
    const DELIVERY_CODE_MIJN_LEVERBELOFTE = 'MijnLeverbelofte';
    const DELIVERY_CODE_VVB = 'VVB';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_FBR,
            self::METHOD_FBB,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryCodeAllowableValues()
    {
        return [
            self::DELIVERY_CODE__24UURS_23,
            self::DELIVERY_CODE__24UURS_22,
            self::DELIVERY_CODE__24UURS_21,
            self::DELIVERY_CODE__24UURS_20,
            self::DELIVERY_CODE__24UURS_19,
            self::DELIVERY_CODE__24UURS_18,
            self::DELIVERY_CODE__24UURS_17,
            self::DELIVERY_CODE__24UURS_16,
            self::DELIVERY_CODE__24UURS_15,
            self::DELIVERY_CODE__24UURS_14,
            self::DELIVERY_CODE__24UURS_13,
            self::DELIVERY_CODE__24UURS_12,
            self::DELIVERY_CODE__1_2D,
            self::DELIVERY_CODE__2_3D,
            self::DELIVERY_CODE__3_5D,
            self::DELIVERY_CODE__4_8D,
            self::DELIVERY_CODE__1_8D,
            self::DELIVERY_CODE_MIJN_LEVERBELOFTE,
            self::DELIVERY_CODE_VVB,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['method'] = $data['method'] ?? null;
        $this->container['delivery_code'] = $data['delivery_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryCodeAllowableValues();
        if (!is_null($this->container['delivery_code']) && !in_array($this->container['delivery_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_code', must be one of '%s'",
                $this->container['delivery_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     *
     * @return self
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets delivery_code
     *
     * @return string|null
     */
    public function getDeliveryCode()
    {
        return $this->container['delivery_code'];
    }

    /**
     * Sets delivery_code
     *
     * @param string|null $delivery_code The delivery promise that applies to this offer. This value will only be used in combination with fulfilmentMethod 'FBR'.
     *
     * @return self
     */
    public function setDeliveryCode($delivery_code)
    {
        $allowedValues = $this->getDeliveryCodeAllowableValues();
        if (!is_null($delivery_code) && !in_array($delivery_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_code', must be one of '%s'",
                    $delivery_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_code'] = $delivery_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



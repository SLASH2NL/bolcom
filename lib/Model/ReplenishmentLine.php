<?php
/**
 * ReplenishmentLine
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  BolApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v5
 *
 * The bol.com API for Retailers.
 *
 * The version of the OpenAPI document: 5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BolApi\Client\Model;

use \ArrayAccess;
use \BolApi\Client\ObjectSerializer;

/**
 * ReplenishmentLine Class Doc Comment
 *
 * @category Class
 * @package  BolApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ReplenishmentLine implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReplenishmentLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ean' => 'string',
        'line_state' => 'string',
        'quantity_announced' => 'int',
        'quantity_received' => 'int',
        'quantity_in_progress' => 'int',
        'quantity_with_graded_state' => 'int',
        'quantity_with_regular_state' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ean' => null,
        'line_state' => null,
        'quantity_announced' => 'int32',
        'quantity_received' => 'int32',
        'quantity_in_progress' => 'int32',
        'quantity_with_graded_state' => 'int32',
        'quantity_with_regular_state' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ean' => 'ean',
        'line_state' => 'lineState',
        'quantity_announced' => 'quantityAnnounced',
        'quantity_received' => 'quantityReceived',
        'quantity_in_progress' => 'quantityInProgress',
        'quantity_with_graded_state' => 'quantityWithGradedState',
        'quantity_with_regular_state' => 'quantityWithRegularState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ean' => 'setEan',
        'line_state' => 'setLineState',
        'quantity_announced' => 'setQuantityAnnounced',
        'quantity_received' => 'setQuantityReceived',
        'quantity_in_progress' => 'setQuantityInProgress',
        'quantity_with_graded_state' => 'setQuantityWithGradedState',
        'quantity_with_regular_state' => 'setQuantityWithRegularState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ean' => 'getEan',
        'line_state' => 'getLineState',
        'quantity_announced' => 'getQuantityAnnounced',
        'quantity_received' => 'getQuantityReceived',
        'quantity_in_progress' => 'getQuantityInProgress',
        'quantity_with_graded_state' => 'getQuantityWithGradedState',
        'quantity_with_regular_state' => 'getQuantityWithRegularState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LINE_STATE_ANNOUNCED = 'ANNOUNCED';
    const LINE_STATE_UNANNOUNCED = 'UNANNOUNCED';
    const LINE_STATE_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLineStateAllowableValues()
    {
        return [
            self::LINE_STATE_ANNOUNCED,
            self::LINE_STATE_UNANNOUNCED,
            self::LINE_STATE_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ean'] = $data['ean'] ?? null;
        $this->container['line_state'] = $data['line_state'] ?? null;
        $this->container['quantity_announced'] = $data['quantity_announced'] ?? null;
        $this->container['quantity_received'] = $data['quantity_received'] ?? null;
        $this->container['quantity_in_progress'] = $data['quantity_in_progress'] ?? null;
        $this->container['quantity_with_graded_state'] = $data['quantity_with_graded_state'] ?? null;
        $this->container['quantity_with_regular_state'] = $data['quantity_with_regular_state'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ean'] === null) {
            $invalidProperties[] = "'ean' can't be null";
        }
        if ($this->container['line_state'] === null) {
            $invalidProperties[] = "'line_state' can't be null";
        }
        $allowedValues = $this->getLineStateAllowableValues();
        if (!is_null($this->container['line_state']) && !in_array($this->container['line_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'line_state', must be one of '%s'",
                $this->container['line_state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['quantity_announced'] === null) {
            $invalidProperties[] = "'quantity_announced' can't be null";
        }
        if ($this->container['quantity_received'] === null) {
            $invalidProperties[] = "'quantity_received' can't be null";
        }
        if ($this->container['quantity_in_progress'] === null) {
            $invalidProperties[] = "'quantity_in_progress' can't be null";
        }
        if ($this->container['quantity_with_graded_state'] === null) {
            $invalidProperties[] = "'quantity_with_graded_state' can't be null";
        }
        if ($this->container['quantity_with_regular_state'] === null) {
            $invalidProperties[] = "'quantity_with_regular_state' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean The EAN number associated with this product.
     *
     * @return self
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets line_state
     *
     * @return string
     */
    public function getLineState()
    {
        return $this->container['line_state'];
    }

    /**
     * Sets line_state
     *
     * @param string $line_state The state of the line indicating whether this line was announced within this replenishment.
     *
     * @return self
     */
    public function setLineState($line_state)
    {
        $allowedValues = $this->getLineStateAllowableValues();
        if (!in_array($line_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'line_state', must be one of '%s'",
                    $line_state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['line_state'] = $line_state;

        return $this;
    }

    /**
     * Gets quantity_announced
     *
     * @return int
     */
    public function getQuantityAnnounced()
    {
        return $this->container['quantity_announced'];
    }

    /**
     * Sets quantity_announced
     *
     * @param int $quantity_announced The amount of announced quantity for this replenishment line.
     *
     * @return self
     */
    public function setQuantityAnnounced($quantity_announced)
    {
        $this->container['quantity_announced'] = $quantity_announced;

        return $this;
    }

    /**
     * Gets quantity_received
     *
     * @return int
     */
    public function getQuantityReceived()
    {
        return $this->container['quantity_received'];
    }

    /**
     * Sets quantity_received
     *
     * @param int $quantity_received The amount of received quantity for this replenishment line.
     *
     * @return self
     */
    public function setQuantityReceived($quantity_received)
    {
        $this->container['quantity_received'] = $quantity_received;

        return $this;
    }

    /**
     * Gets quantity_in_progress
     *
     * @return int
     */
    public function getQuantityInProgress()
    {
        return $this->container['quantity_in_progress'];
    }

    /**
     * Sets quantity_in_progress
     *
     * @param int $quantity_in_progress The amount of quantity that is still in progress at the warehouse for this replenishment line.
     *
     * @return self
     */
    public function setQuantityInProgress($quantity_in_progress)
    {
        $this->container['quantity_in_progress'] = $quantity_in_progress;

        return $this;
    }

    /**
     * Gets quantity_with_graded_state
     *
     * @return int
     */
    public function getQuantityWithGradedState()
    {
        return $this->container['quantity_with_graded_state'];
    }

    /**
     * Sets quantity_with_graded_state
     *
     * @param int $quantity_with_graded_state The quantity within this shipment line that has a graded (unsalable) state.
     *
     * @return self
     */
    public function setQuantityWithGradedState($quantity_with_graded_state)
    {
        $this->container['quantity_with_graded_state'] = $quantity_with_graded_state;

        return $this;
    }

    /**
     * Gets quantity_with_regular_state
     *
     * @return int
     */
    public function getQuantityWithRegularState()
    {
        return $this->container['quantity_with_regular_state'];
    }

    /**
     * Sets quantity_with_regular_state
     *
     * @param int $quantity_with_regular_state The quantity within this shipment line that has a regular (salable) state.
     *
     * @return self
     */
    public function setQuantityWithRegularState($quantity_with_regular_state)
    {
        $this->container['quantity_with_regular_state'] = $quantity_with_regular_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



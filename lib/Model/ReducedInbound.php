<?php
/**
 * ReducedInbound
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BolApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v4
 *
 * The bol.com API for Retailers.
 *
 * The version of the OpenAPI document: 4.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BolApi\Client\Model;

use \ArrayAccess;
use \BolApi\Client\ObjectSerializer;

/**
 * ReducedInbound Class Doc Comment
 *
 * @category Class
 * @package  BolApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ReducedInbound implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReducedInbound';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inbound_id' => 'int',
        'reference' => 'string',
        'creation_date_time' => '\DateTime',
        'state' => 'string',
        'labelling_service' => 'bool',
        'announced_bskus' => 'int',
        'announced_quantity' => 'int',
        'received_bskus' => 'int',
        'received_quantity' => 'int',
        'time_slot' => '\BolApi\Client\Model\TimeSlot',
        'inbound_transporter' => '\BolApi\Client\Model\Transporter'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inbound_id' => 'int64',
        'reference' => null,
        'creation_date_time' => 'date-time',
        'state' => null,
        'labelling_service' => null,
        'announced_bskus' => 'int64',
        'announced_quantity' => 'int64',
        'received_bskus' => 'int64',
        'received_quantity' => 'int64',
        'time_slot' => null,
        'inbound_transporter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inbound_id' => 'inboundId',
        'reference' => 'reference',
        'creation_date_time' => 'creationDateTime',
        'state' => 'state',
        'labelling_service' => 'labellingService',
        'announced_bskus' => 'announcedBSKUs',
        'announced_quantity' => 'announcedQuantity',
        'received_bskus' => 'receivedBSKUs',
        'received_quantity' => 'receivedQuantity',
        'time_slot' => 'timeSlot',
        'inbound_transporter' => 'inboundTransporter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inbound_id' => 'setInboundId',
        'reference' => 'setReference',
        'creation_date_time' => 'setCreationDateTime',
        'state' => 'setState',
        'labelling_service' => 'setLabellingService',
        'announced_bskus' => 'setAnnouncedBskus',
        'announced_quantity' => 'setAnnouncedQuantity',
        'received_bskus' => 'setReceivedBskus',
        'received_quantity' => 'setReceivedQuantity',
        'time_slot' => 'setTimeSlot',
        'inbound_transporter' => 'setInboundTransporter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inbound_id' => 'getInboundId',
        'reference' => 'getReference',
        'creation_date_time' => 'getCreationDateTime',
        'state' => 'getState',
        'labelling_service' => 'getLabellingService',
        'announced_bskus' => 'getAnnouncedBskus',
        'announced_quantity' => 'getAnnouncedQuantity',
        'received_bskus' => 'getReceivedBskus',
        'received_quantity' => 'getReceivedQuantity',
        'time_slot' => 'getTimeSlot',
        'inbound_transporter' => 'getInboundTransporter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATE_DRAFT = 'DRAFT';
    const STATE_PREANNOUNCED = 'PREANNOUNCED';
    const STATE_ARRIVEDATWH = 'ARRIVEDATWH';
    const STATE_CANCELLED = 'CANCELLED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_DRAFT,
            self::STATE_PREANNOUNCED,
            self::STATE_ARRIVEDATWH,
            self::STATE_CANCELLED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inbound_id'] = $data['inbound_id'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['creation_date_time'] = $data['creation_date_time'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['labelling_service'] = $data['labelling_service'] ?? null;
        $this->container['announced_bskus'] = $data['announced_bskus'] ?? null;
        $this->container['announced_quantity'] = $data['announced_quantity'] ?? null;
        $this->container['received_bskus'] = $data['received_bskus'] ?? null;
        $this->container['received_quantity'] = $data['received_quantity'] ?? null;
        $this->container['time_slot'] = $data['time_slot'] ?? null;
        $this->container['inbound_transporter'] = $data['inbound_transporter'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inbound_id'] === null) {
            $invalidProperties[] = "'inbound_id' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['labelling_service'] === null) {
            $invalidProperties[] = "'labelling_service' can't be null";
        }
        if ($this->container['announced_bskus'] === null) {
            $invalidProperties[] = "'announced_bskus' can't be null";
        }
        if ($this->container['announced_quantity'] === null) {
            $invalidProperties[] = "'announced_quantity' can't be null";
        }
        if ($this->container['received_bskus'] === null) {
            $invalidProperties[] = "'received_bskus' can't be null";
        }
        if ($this->container['received_quantity'] === null) {
            $invalidProperties[] = "'received_quantity' can't be null";
        }
        if ($this->container['inbound_transporter'] === null) {
            $invalidProperties[] = "'inbound_transporter' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inbound_id
     *
     * @return int
     */
    public function getInboundId()
    {
        return $this->container['inbound_id'];
    }

    /**
     * Sets inbound_id
     *
     * @param int $inbound_id A unique identifier for an inbound shipment.
     *
     * @return self
     */
    public function setInboundId($inbound_id)
    {
        $this->container['inbound_id'] = $inbound_id;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference A user defined reference to identify the inbound shipment.
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets creation_date_time
     *
     * @return \DateTime|null
     */
    public function getCreationDateTime()
    {
        return $this->container['creation_date_time'];
    }

    /**
     * Sets creation_date_time
     *
     * @param \DateTime|null $creation_date_time The date and time the inbound shipment was created, in ISO 8601 format.
     *
     * @return self
     */
    public function setCreationDateTime($creation_date_time)
    {
        $this->container['creation_date_time'] = $creation_date_time;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The current state of the inbound shipment.
     *
     * @return self
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets labelling_service
     *
     * @return bool
     */
    public function getLabellingService()
    {
        return $this->container['labelling_service'];
    }

    /**
     * Sets labelling_service
     *
     * @param bool $labelling_service Indicates whether the inbound will be labeled by bol.com or not.
     *
     * @return self
     */
    public function setLabellingService($labelling_service)
    {
        $this->container['labelling_service'] = $labelling_service;

        return $this;
    }

    /**
     * Gets announced_bskus
     *
     * @return int
     */
    public function getAnnouncedBskus()
    {
        return $this->container['announced_bskus'];
    }

    /**
     * Sets announced_bskus
     *
     * @param int $announced_bskus The number of announced BSKU‘s.
     *
     * @return self
     */
    public function setAnnouncedBskus($announced_bskus)
    {
        $this->container['announced_bskus'] = $announced_bskus;

        return $this;
    }

    /**
     * Gets announced_quantity
     *
     * @return int
     */
    public function getAnnouncedQuantity()
    {
        return $this->container['announced_quantity'];
    }

    /**
     * Sets announced_quantity
     *
     * @param int $announced_quantity The number of announced items.
     *
     * @return self
     */
    public function setAnnouncedQuantity($announced_quantity)
    {
        $this->container['announced_quantity'] = $announced_quantity;

        return $this;
    }

    /**
     * Gets received_bskus
     *
     * @return int
     */
    public function getReceivedBskus()
    {
        return $this->container['received_bskus'];
    }

    /**
     * Sets received_bskus
     *
     * @param int $received_bskus Number of lines that were scanned in our warehouse. This value does not provide the unique number of received bsku's.
     *
     * @return self
     */
    public function setReceivedBskus($received_bskus)
    {
        $this->container['received_bskus'] = $received_bskus;

        return $this;
    }

    /**
     * Gets received_quantity
     *
     * @return int
     */
    public function getReceivedQuantity()
    {
        return $this->container['received_quantity'];
    }

    /**
     * Sets received_quantity
     *
     * @param int $received_quantity The number of received items.
     *
     * @return self
     */
    public function setReceivedQuantity($received_quantity)
    {
        $this->container['received_quantity'] = $received_quantity;

        return $this;
    }

    /**
     * Gets time_slot
     *
     * @return \BolApi\Client\Model\TimeSlot|null
     */
    public function getTimeSlot()
    {
        return $this->container['time_slot'];
    }

    /**
     * Sets time_slot
     *
     * @param \BolApi\Client\Model\TimeSlot|null $time_slot time_slot
     *
     * @return self
     */
    public function setTimeSlot($time_slot)
    {
        $this->container['time_slot'] = $time_slot;

        return $this;
    }

    /**
     * Gets inbound_transporter
     *
     * @return \BolApi\Client\Model\Transporter
     */
    public function getInboundTransporter()
    {
        return $this->container['inbound_transporter'];
    }

    /**
     * Sets inbound_transporter
     *
     * @param \BolApi\Client\Model\Transporter $inbound_transporter inbound_transporter
     *
     * @return self
     */
    public function setInboundTransporter($inbound_transporter)
    {
        $this->container['inbound_transporter'] = $inbound_transporter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


